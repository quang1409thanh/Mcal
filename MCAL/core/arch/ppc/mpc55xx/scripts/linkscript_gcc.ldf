/* 
 * Copyright (C) 2009  ArcCore AB <contact@arccore.com> 
 */

#include "Calibration_Settings.h"
/* Undef sections/keywords */ 
#undef PPC

OUTPUT_FORMAT("elf32-powerpc", "elf32-powerpc", "elf32-powerpc")
OUTPUT_ARCH(powerpc)
ENTRY(_start)

MEMORY
{
	#include "memory_mcu.ldf"
}

SECTIONS
{
/* __CALIB_RAM_START, __CALIB_RAM_END, __CALIB_ROM_START are needed by the a2l and the rte generator. 
  CALIBRATION_ENABLED, CALIBRATION_INITIALIZED_RAM, CALIBRATION_FLS_START are generated by rte 
*/
#if defined(CALIBRATION_ENABLED)
#if defined(CALIBRATION_INITIALIZED_RAM)
/* when calibration is active a flash and ram area is needed. the rte will copy the calibration area from flash to ram. */
	.calibration : AT(CALIBRATION_FLS_START) {	
			*(.calibration .calib_component .calib_shared)
	} > L_SRAM_0		
#else /* CALIBRATION_INITIALIZED_RAM */
/* when calibration isnt active only a flash area is needed. */		
	.calibration : AT(CALIBRATION_FLS_START) {
			*(.calibration .calib_component .calib_shared)
	} > L_FLASH_CODE_0	
#endif

__CALIB_RAM_START = ADDR(.calibration);
__CALIB_RAM_END = ADDR(.calibration) + SIZEOF(.calibration);
__CALIB_ROM_START	= LOADADDR(.calibration);
#else
	/* failsafe to avoid trouble with defined calib variables if CALIBRATION_ENABLED is not set */
	.calibration : {
			*(.calibration .calib_component .calib_shared)
	} > L_FLASH_CODE_0
	ASSERT(SIZEOF(.calibration) == 0, ".calibration section used but CALIBRATION_ENABLED is undefined")
#endif /* CALIBRATION_ENABLED */

    __FLS_PROG_START__ = L_BOOT_RESERVED_SPACE + L_FLASH_CODE_0_ORIGIN;
	.rcw  __FLS_PROG_START__ : { 
		KEEP(*(.rcw)) 
	} >  L_FLASH_CODE_0

    .text :
	{
	    crt0.o(.text);
    	*(.text .text.* .init .fini* .eini* .gnu.linkonce* .gnu.warning);
	} > L_FLASH_CODE_0

    .exception_tbl : {
    	KEEP(*(.exception_tbl))
    } > L_FLASH_CODE_0

	/* Read-only data section. */
	.rodata :	{ 
		*(.rodata .rodata.* .gnu.linkonce.r.*);
		*(.got.plt) *(.got)
	} > L_FLASH_CODE_0

	/* initialized read-only small data section. */
	.sdata2 :	{
		_SDA2_BASE_ = .; /* r2 */
		*(.sdata2 .sdata2.* .gnu.linkonce.s2.*);
		*(PPC.EMB.sdata2 .PPC.EMB.sbss2)
		. = ALIGN(0x10);
	} > L_FLASH_CODE_0

	/* uninitialized read-only small data section. */
	.sbss2 : {
		*(.sbss2 .sbss2.* .gnu.linkonce.sb2.*);
		__TEXT_END = .;
	} > L_FLASH_CODE_0

#if defined(CFG_MPC5516)
	.Mcu_Arc_LowPowerRecoverFlash 0x000ff000: {
	    *(.lowpower_text);
	}
	.lowpower_vector 0x000ffffc: {
	    *(.lowpower_vector);
	}
#endif	
	
	.lowpower_text : {
		__LP_TEXT_START = .;
		*(.lowpower_text)
		__LP_TEXT_END = .;
	} > L_SRAM_0 AT> L_FLASH_CODE_0

	.lowpower_bss : {} > L_SRAM_0 

	.data : {
		__ram_start = .;
		__DATA_RAM = .; 
		*(.data .data.* .gnu.linkonce.d.* .gnu.linkonce.r.* .eh_frame)
		*(.ram_no_cache_data)
		. = ALIGN(0x10);
	} > L_SRAM_0 AT> L_FLASH_CODE_0

	.sdata : {
		__SDATA_START__ = .;
		_SDA_BASE_ = .;		/* r13 */
		*(.sdata .sdata.* .gnu.linkonce.s.*)
		*(PPC.EMB.sdata2 .PPC.EMB.sbss2)
		__DATA_END = .;
	} > L_SRAM_0 AT> L_FLASH_CODE_0

    .sbss :
	{
		__SBSS_START__ = .;
		*(.sbss .sbss.* .scommon .gnu.linkonce.sb.* .t32_outport);
		__SBSS_END__ = .;
		_end = .;
	} > L_SRAM_0

	.t32_outport ALIGN(0x10): 
	{ 
		*(.t32_outport); 
	} 			> L_SRAM_0
		
	.bss (NOLOAD) :  
	{
		*(.got2);
		*(.fixup);
		*(.bss .bss.* COMMON .gnu.linkonce.b.*);
		__BSS_END 	= .; 
	} 	> L_SRAM_0
	
	
	.ram_no_cache_bss (NOLOAD) : {
		*(.ram_no_cache_bss)
	} > L_SRAM_0
	
#if !defined(CFG_VLE)
    .ctors          :
    {
       KEEP (*(SORT(.ctors.*)))
     }
#endif

.uninit ALIGN(0x10) (NOLOAD) : { *(.winidea_port .ramlog .dem_eventmemory_pri) ; } 			> L_SRAM_0

	/* Always place last in RAM */
	.heap ALIGN(0x4): {
		PROVIDE(_heap_start = .);
	} > L_SRAM_0
}

_heap_end = ORIGIN(L_SRAM_0) + LENGTH(L_SRAM_0);

__TEXT_START    	= ADDR(.text);
__RAM_START    		= ADDR(.sdata);

__DATA_RAM  		= ADDR(.data);
__DATA_ROM          = LOADADDR(.data);
__LP_TEXT_ROM       = LOADADDR(.lowpower_text);
__BSS_START 		= ADDR(.sbss);

/* _SDA_BASE_ and _SDA2_BASE_ is defined in e500 ABI
 * Some of the symbols below is used by eabi() that does interesting.
 * Can't get rid of it even with no-eabi option
 */

 __SDATA2_START__	= ADDR(.sdata2);
 __SBSS2_END__		= ADDR(.sbss2) + SIZEOF(.sbss2);

__EXCEPT_START__	= 0x0;
__EXCEPT_END__		= 0x0;

__SP_INIT 			= _heap_end;
__SP_END 			= __SP_INIT - 1024;
__SP_INIT_Z0		= __SP_END;

