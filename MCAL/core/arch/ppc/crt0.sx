#define _ASSEMBLER_
#include "asm_ppc.h"

ASM_SECTION(.rcw)
ASM_CODE_DIRECTIVE()

	.global _resetconfiguration
_resetconfiguration:
#if defined(CFG_MPC5777M) 
	.byte  0x00
	.byte  0x5A   #Boot identifier
	.byte  0x0
	.byte  0x01   #Boot core 2
	.long  _start #Core 2 start address				/* 0x04 */
	.long  0x0	  #Configuration bits 0             /* 0x08 */
	.long  0x0	  #Configuration bits 1             /* 0x0c */
	.long _start  #Core 0 start address             /* 0x10 */
	.long  _start #Core 1 start address             /* 0x14 */
	.long _start  #Checker core 0 start address     /* 0x18 */

#elif defined(CFG_MPC5748G)|| defined(CFG_MPC5747C)|| defined(CFG_MPC5746C)

    .byte  0x00
    .byte  0x5A   #Boot identifier
    .byte  0x0
    .byte  0x02   #Boot core 0
    .long  0x0    #Core 2 start address             /* 0x04 */
    .long  0x0    #Configuration bits 0             /* 0x08 */
    .long  0x0    #Configuration bits 1             /* 0x0c */
    .long _start  #Core 0 start address             /* 0x10 */
    .long  0x0    #Core 1 start address             /* 0x14 */
    .long  0x0    #RFU                               /* 0x18 */ 
#else                                               
#if defined(CFG_VLE)
	.byte  0x01   #no watchdog, VLE
#else
	.byte  0x00   #no watchdog
#endif	
	.byte  0x5A   #Boot identifier
	.byte  0x00
	.byte  0x00
	.long  _start		/* 0x04 */
	
	/* Area for the boot to write in */
	.long  0xffffffff	/* 0x08 */
	.long  0xffffffff	/* 0x0c */
	.long  0xffffffff	/* 0x10 */
	.long  0xffffffff	/* 0x14 */
	.long  0xffffffff	/* 0x18 */
#endif /* defined(CFG_MPC5777M) */

    /* Keep and area for the boot to write in. 
     * Make space instead here instead of fixing and maintaining
     * in all the linker files. */
	.long  0xffffffff	/* 0x1c */
	.long  0xffffffff	/* 0x20 */
	.long  0xffffffff	/* 0x24 */
	.long  0xffffffff	/* 0x28 */
	.long  0xffffffff   /* 0x2c */
	.long  0xffffffff	/* 0x30 */
	.long  0xffffffff	/* 0x34 */
	.long  0xffffffff	/* 0x38 */
	.long  0xffffffff	/* 0x3c--0x3f */
	.long  0xffffffff	/* 0x40 */
	.long  0xffffffff	/* 0x44 */
	.long  0xffffffff	/* 0x48 */
	.long  0xffffffff   /* 0x4c--0x4f */
	.long  0xffffffff	/* 0x50 */
	.long  0xffffffff	/* 0x54 */
	.long  0xffffffff	/* 0x58 */
	.long  0xffffffff   /* 0x5c--0x5f */	

	.extern _SDA_BASE_
	.extern _SDA2_BASE_
	.extern __SP_INIT
	.extern __SP_END
	.extern __DATA_RAM
	.extern __DATA_END
	.extern __BSS_START
	.extern __BSS_END
	.extern __DATA_ROM
	.extern exit
	.extern main
	.extern init
	.extern ShutdownOS
	

	
ASM_SECTION_TEXT(.text)	
ASM_CODE_DIRECTIVE()	

#if defined(CFG_MPC5643L) || defined(CFG_SPC56XL70) || defined(CFG_MPC5645S)
	.balign		0x1000
#else	
	.balign		4
#endif

	.globl	_start
	.type	_start,@function

	// Good information about the E500 is freescale doc: E500ABIUG.pdf
	
.global _start_z0
_start_z0:
	LOAD_ADDR_32(r1,__SP_INIT_Z0)
	// r13, base of .sdata
	LOAD_ADDR_32(13,_SDA_BASE_)

	// r2, base of .sdata2 and .sbss2
	LOAD_ADDR_32(r2,_SDA2_BASE_)

	// make space for initial backchain..
	subi    r1,r1,16
	b main



__start:
_start:
	/*  Clear SRAM for initial stack */
//#if !defined(SRAM_SIZE)
//#error SRAM_SIZE not defined. Add it to board/<board>/build_config.mk
//#endif

//	li r0, ((__SP_INIT - __SP_END)/(2*4)) // init initial stack

#if defined(CFG_MPC5643L) || defined(CFG_SPC56XL70) || defined(CFG_MPC5645S)
	b mpc564x_init
mpc564x_init_b:		
#endif

#if defined(CFG_MPC5668)
	b mpc5668_init
mpc5668_init_b:		
#endif

	// r1, stack pointer
	LOAD_ADDR_32(1,__SP_INIT)
	LOAD_ADDR_32(3,__SP_END)
	
	subf r3, r3, r1
	srwi r3, r3, 3
	mtctr r3
	li	r31,0
	li	r30,0
init_ram_loop:
	subi r1,r1,2*4 			// dec the ram ptr; 2 GPRs * 4 bytes
	stmw r30,0(r1) 			// write r30, r31 to SRAM
	bdnz init_ram_loop 		// loop over initial stack

	// r1, stack pointer
	LOAD_ADDR_32(1,__SP_INIT)
	
	/* Init all registers. All registers must be written to ensure that main core and lockstep core share register values */
	lmw	r2, (-30*4)(r1) /* 30 registers, 4 bytes per register */
	
	// Set up the reserved registers in EABI: (r1),r2 and r13
	// r13, base of .sdata
	LOAD_ADDR_32(13,_SDA_BASE_)

	// r2, base of .sdata2 and .sbss2
	LOAD_ADDR_32(2,_SDA2_BASE_)

	/* Check for at least 8 byte alignment of stack*/
	clrlwi	r3,r1,(32-3)
	cmpwi	r3,0
	bne		badAlignment

	// make space for initial backchain..
	subi    r1,r1,8

	bl init

	/* Call main() with argc set to 1 and argv ignored */
	li	r3,1
	bl	main

	/* Call exit() with the return value from main() as argument */
	b	exit

	.globl	_exit
_exit:
#if defined(CFG_KERNEL)
	li 	r3,30 		/* E_OS_EXIT_ABORT */	
	bl	ShutdownOS
#endif
	b _exit

#if defined(CFG_MPC5643L) || defined(CFG_SPC56XL70) || defined(CFG_MPC5645S) || defined(CFG_MPC5668)
/* 
 * r3 - MAS0 
 * r4 - MAS1
 * r5 - MAS2
 * r6 - MAS3
 */
tlbSet:
    mtspr SPR_MAS0,r3     
    mtspr SPR_MAS1,r4     
    mtspr SPR_MAS2,r5     
    mtspr SPR_MAS3,r6
    msync
    isync
	tlbwe
	isync
	blr	
#endif

#if defined(CFG_MPC5643L) || defined(CFG_SPC56XL70) || defined(CFG_MPC5645S)
/*
 * Init MPC5643 
 *
 * General Registers — CR, CTR, LR, GPR0-GPR31, ACC 
 * Debug Registers — DBCNT, DVC1-DVC2 
 * Exception Handling — SPRG0-SPRG7, SPRG8-SPRG9, USPRG0, SRR0-SRR1, CSRR0-CSRR1, 
 * DSRR0-DSRR1, MCSRR0-MCSRR1, IVPR, IVOR0-IVOR15, IVOR32-IVOR34, MCAR, DEAR 
 * Timers — DEC, DECAR, TBL, TBU
 * Memory Management Registers — MAS0-MAS4, MAS6
 */
	
mpc564x_init:
	/* GPR */
	li r0,0
	li r1,0
	li r2,0
	li r3,0
	li r4,0
	li r5,0
	li r6,0
	li r7,0
	li r8,0
	li r9,0
	li r10,0
	li r11,0
	li r12,0
	li r13,0
	li r14,0
	li r15,0
	li r16,0
	li r17,0
	li r18,0
	li r19,0
	li r20,0
	li r21,0
	li r22,0
	li r23,0
	li r24,0
	li r25,0
	li r26,0
	li r27,0
	li r28,0
	li r29,0
	li r30,0
	li r31,0
	
	/* CR, CTR, LR */
	mtlr 	r3
	mtctr 	r3
	mtcr 	r3
	mtsrr0 	r3
	mtsrr1 	r3
	mtcsrr0 	r3
	mtcsrr1 	r3
	mtspr SPR_MCSRR0,r3
	mtspr SPR_MCSRR1,r3
	mtspr 	SPR_MCAR,r3
	mtspr   SPR_DEAR,r3
	mtspr   SPR_DEC,r3
	mtspr   SPR_DECAR,r3
	mtspr   SPR_TBL_W,r3
	mtspr   SPR_TBU_W,r3
	
#if defined(CFG_SPE) || defined(CFG_SPE_INIT)	
	/* Enable SPE  */	
	mfmsr		r3
    OR2IS(r3,0x0200)
	mtmsr 		r3
	isync
	
	evmergelo 	r0,r3,r3
	evmergelo 	r1,r3,r3
	evmergelo 	r2,r3,r3
	evmergelo 	r3,r3,r3
	evmergelo 	r4,r3,r3
	evmergelo 	r5,r3,r3
	evmergelo 	r6,r3,r3
	evmergelo 	r7,r3,r3
	evmergelo 	r8,r3,r3
	evmergelo 	r9,r3,r3
	evmergelo 	r10,r3,r3
	evmergelo 	r11,r3,r3
	evmergelo 	r12,r3,r3
	evmergelo 	r13,r3,r3
	evmergelo 	r14,r3,r3
	evmergelo 	r15,r3,r3
	evmergelo 	r16,r3,r3
	evmergelo 	r17,r3,r3
	evmergelo 	r18,r3,r3
	evmergelo 	r19,r3,r3
	evmergelo 	r20,r3,r3
	evmergelo 	r21,r3,r3
	evmergelo 	r22,r3,r3
	evmergelo 	r23,r3,r3
	evmergelo 	r24,r3,r3
	evmergelo 	r25,r3,r3
	evmergelo 	r26,r3,r3
	evmergelo 	r27,r3,r3
	evmergelo 	r28,r3,r3
	evmergelo 	r29,r3,r3
	evmergelo 	r30,r3,r3
	evmergelo 	r31,r3,r3

	evmra r3,r3		/* ACC */
#endif /* defined(CFG_SPE) || defined(CFG_SPE_INIT) */	

	/* RAM */
	LOAD_ADDR_32 (r3, (0x10000000+(1<<16)))
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_4M))
    LOAD_ADDR_32 (r5, (0x40000000 + VLE_MAS2_VAL + MAS2_I))
    LOAD_ADDR_32 (r6, (0x40000000 + MAS3_FULL_ACCESS))
    bl	tlbSet	
    
    /* Flash */    
    LOAD_ADDR_32 (r3, (0x10000000+(0<<16))) 
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_4M))
    LOAD_ADDR_32 (r5, (0x0 + VLE_MAS2_VAL))
    LOAD_ADDR_32 (r6, (0x0 + MAS3_FULL_ACCESS))
    bl	tlbSet	

	LOAD_ADDR_32 (r3, (0x10000000+(1<<16)))
#if defined(CFG_MPC5643L) || defined(CFG_SPC56XL70)
    /* 0x8FF0_0000 -- 0x8FF5_0000 On-platform 1 peripherals */
    ADD2IS(r3,1)
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_1M))
    LOAD_ADDR_32 (r5, (0x8ff00000 + VLE_MAS2_VAL +  MAS2_I))
    LOAD_ADDR_32 (r6, (0x8ff00000 + MAS3_FULL_ACCESS))
    bl	tlbSet	
#endif

    /* 0xC3F8_8000-0xC3FF_4000 : Off-platform peripherals */ 
    ADD2IS(r3,1)
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_1M))
    LOAD_ADDR_32 (r5, (0xc3f00000 + VLE_MAS2_VAL +  MAS2_I))
    LOAD_ADDR_32 (r6, (0xc3f00000 + MAS3_FULL_ACCESS))
    bl	tlbSet	

    /* 0xFFE0_0000-0xFFE7_8000 : Off-platform peripherals */
    ADD2IS(r3,1) 
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_1M))
    LOAD_ADDR_32 (r5, (0xFFE00000 + VLE_MAS2_VAL +  MAS2_I))
    LOAD_ADDR_32 (r6, (0xFFE00000 + MAS3_FULL_ACCESS))
    bl	tlbSet	

    /* 0xFFF0_0000 -- 0xFFFF_FFFF : On Platform 0 Peripherals */ 
    ADD2IS(r3,1)
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_1M))
    LOAD_ADDR_32 (r5, (0xFFF00000 + VLE_MAS2_VAL +  MAS2_I))
    LOAD_ADDR_32 (r6, (0xFFF00000 + MAS3_FULL_ACCESS))
    bl	tlbSet	

#if defined(CFG_MPC5645S) 

	/* Graphics RAM */
	ADD2IS(r3,1)
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_1M))
    LOAD_ADDR_32 (r5, (0x60000000 + VLE_MAS2_VAL +  MAS2_I))
    LOAD_ADDR_32 (r6, (0x60000000 + MAS3_FULL_ACCESS))
    bl	tlbSet	

	/* Parallel  QSPI, Individual flashes  */
	ADD2IS(r3,1)
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_256M))
    LOAD_ADDR_32 (r5, (0x70000000 + VLE_MAS2_VAL +  MAS2_I))
    LOAD_ADDR_32 (r6, (0x70000000 + MAS3_FULL_ACCESS))
    bl	tlbSet	

	/* Parallel  QSPI, combined */
	ADD2IS(r3,1)
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_256M))
    LOAD_ADDR_32 (r5, (0x80000000 + VLE_MAS2_VAL +  MAS2_I))
    LOAD_ADDR_32 (r6, (0x80000000 + MAS3_FULL_ACCESS))
    bl	tlbSet	

#endif	/* defined(CFG_MPC5645S)  */


	b mpc564x_init_b

#endif	/* defined(CFG_MPC5643L) */

#if defined(CFG_MPC5668)
/*
 * Init MPC5688
 *
 * General Registers — CR, CTR, LR, GPR0-GPR31, ACC 
 * Debug Registers — DBCNT, DVC1-DVC2 
 * Exception Handling — SPRG0-SPRG7, SPRG8-SPRG9, USPRG0, SRR0-SRR1, CSRR0-CSRR1, 
 * DSRR0-DSRR1, MCSRR0-MCSRR1, IVPR, IVOR0-IVOR15, IVOR32-IVOR34, MCAR, DEAR 
 * Timers — DEC, DECAR, TBL, TBU
 * Memory Management Registers — MAS0-MAS4, MAS6
 */
	
mpc5668_init:
    /* Flash, TLB entry 1*/    
    LOAD_ADDR_32 (r3, (0x10000000+(1<<16))) 
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_4M))
    LOAD_ADDR_32 (r5, (0x0 + VLE_MAS2_VAL))
    LOAD_ADDR_32 (r6, (0x0 + MAS3_FULL_ACCESS))
    bl	tlbSet	
    
	/* RAM, TLB entry 3 */
	LOAD_ADDR_32 (r3, (0x10000000+(3<<16)))
    LOAD_ADDR_32 (r4, (0xC0000000 + MAS1_TSIZE_1M))
    LOAD_ADDR_32 (r5, (0x40000000 + VLE_MAS2_VAL + MAS2_I))
    LOAD_ADDR_32 (r6, (0x40000000 + MAS3_FULL_ACCESS))
    bl	tlbSet	

	b mpc5668_init_b

#endif	/* defined(CFG_MPC5668) */	

	.global badAlignment
badAlignment:
	b badAlignment
	
.global memset_uint64
memset_uint64:
	stwu r1, -16(r1)
    stmw r30, 8(r1)
    lmw r30, 0(r4)
    srwi r5, r5, 3
    mtctr r5
memset_uint64_do:
    stmw r30, 0(r3)
    addi r3, r3, 8
    bdnz memset_uint64_do
    lmw r30, 8(r1)
    addi r1, r1, 16
	blr
	.end
