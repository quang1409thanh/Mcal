/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

#define _ASSEMBLER_
//#include "kernel_offset.h"
#include "asm_offset.h"
#include "arch_stack.h"
#include "asm_rh850.h"

.section .text
.extern _Os_Sys
.extern _Irq_Entry
.extern _Os_Isr

/**
 * Os_ArchSetStackPointer
 */
    .global Os_ArchSetStackPointer
    .type Os_ArchSetStackPointer,  @function
Os_ArchSetStackPointer:
    mov r6,sp
    jmp [lp]

/**
 * Os_ArchGetStackPtr
 */
    .global Os_ArchGetStackPtr
    .type Os_ArchGetStackPtr,  @function
Os_ArchGetStackPtr:
    mov sp,r10
    jmp [lp]


/**
 * Os_ArchSetSpAndCall
 *
 * @param r6 Pointer to the stack
 * @param r7 Pointer to the function to call
 */
 	.global _Os_ArchSetSpAndCall
 	.type _Os_ArchSetSpAndCall,  @function
_Os_ArchSetSpAndCall:
	mov r6, sp
	jmp	[r7]
	

	/* 
	 * _Os_ArchSwapContext
     *	 
	 * @param r6 - PCB for old task
	 * @param r7 - PCB for new task
	 */
	 
    .global _Os_ArchSwapContext
    .type _Os_ArchSwapContext,  @function
_Os_ArchSwapContext:
	/* Save "callee save" registers */	
	pushsp	r0-r31
	
	/* Store func context */
	addi	-C_SIZE,sp,sp
	mov		FUNC_PATTERN,r20
	st.w	r20, C_CONTEXT_OFFS[sp]
	
	/* store our stack in old PCB */
	st.w    sp, PCB_STACK_CURR_P[r6]

	/* flow down */ 

    
   /*
    * void Os_ArchSwapContextTo( NULL, pcb_t *new )
    *  
    * Restore a FUNC or ISR pattern 
    * 
    * @param r6 - always NULL
    * @param r7 - The pcb to switch to.
    */     
    .global _Os_ArchSwapContextTo
    .type _Os_ArchSwapContextTo,  @function
_Os_ArchSwapContextTo:
	/* Get stack for new task */
	ld.w PCB_STACK_CURR_P[r7],sp	
	
	/* Set new current task */
	MOV32(_Os_Sys,r6)
	st.w    r7, SYS_CURR_PCB_P[r6]
	
	/* Restore C context */
	ld.w    C_CONTEXT_OFFS[sp],r6
    CMP16(FUNC_PATTERN,r6)
    be     	os_func_restore
    CMP16(ISR_PATTERN, r6)
    be     	os_isr_restore
os_stack_problem:
	jr		os_stack_problem		
     
    /* Something have overwritten the context, bail out */

os_func_restore:
	/* Get ISPR to check if we have to end an interrupt first 
	 * In this case we have preemted a task with an an interrupt and 
	 * in that interrupt we have activated another task with higher priority.
	 * So we want to swap that in but we want to terminate the interrupt first
	 * so we don't run in interrupt context.  
 	 */
	stsr	10,r20,2		/* get ISPR */
	CMP16(0,r20)			/* == 0 ? */
	be	normalReturn	
	
	/* Terminate the exception, ie execute "eiret" and flow down */
	MOV32(normalReturn,r20)
	ldsr r20,0  /* load eipc */
	mov	0x8000,r20
	ldsr r20,1  /* load eipsw */
	
	/* eiret pc<-eipc and psw<-eipsw */ 
	eiret 

normalReturn:
	addi 	C_SIZE,sp,sp	
	popsp 	r0-r31
	jmp [lp]
	
	

os_isr_restore:
    addi 	C_SIZE,sp,sp	
	/* load iepc and eipsw from stack so 
	 * that they can be updated with "eiret" */
	ld.w 0[sp],r20	
	ldsr r20,0		/* EIPC  = SR0, 0  */
	ld.w 4[sp],r20
	ldsr r20,1		/* EIPSW = SR1, 0  */

#if defined(CFG_RH850F1H)
	ld.w 8[sp],r20	
	ldsr r20,6		/* FPSR  = SR6,0  */
	ld.w 12[sp],r20
	ldsr r20,7		/* FPEPC = SR7,0   */
#endif	
	addi  16,sp,sp
	
	popsp 	r0-r31	/* note! popsp do pop memory address but not to sp */

	/* eiret pc<-eipc and psw<-eipsw */ 
	eiret 


/* EI interrupt handler 
 * HW set registers are 
 * - IEPC
 * - EIPSW
 * - EIIC - Exception cause code.
 */     
     .global _Irq_Handler
    .type _Irq_Handler,  @function 
_Irq_Handler:
	/* Save all registers */
	pushsp 	r0-r31
	
	/* 
	 * Save things according to ABI, See Compiler ABI Table 2 
	 */
	/* Save xPC, xPSW and xIC */
	addi   -16,sp,sp
	stsr   0,r20      /* EIPC  = SR0, 0  */
	st.w   r20,0[sp]
	stsr   1,r20	  /* EIPSW = SR1, 0  */
	st.w   r20,4[sp]

#if defined(CFG_RH850F1H)	
	/* Floating point registers*/
	stsr   6,r20      /* FPSR   = SR6,0  */
	st.w   r20,8[sp]
	stsr   7,r20	  /* FPEPC  = SR7,0   */
	st.w   r20,12[sp]
#endif
	
	/* push context */
	addi 	-C_SIZE,sp, sp
	mov 	ISR_PATTERN,r7
	st.w    r7,C_CONTEXT_OFFS[sp]		


	mov 	sp,r6		/* stack as argument for Irq_Entry */
			
	/* Check interrupt level */
	MOV32(_Os_Sys,r8)
	ld.w 	SYS_INT_NEST_CNT[r8],r7
	cmp		0,r7
	bgt	    dontLoadIntStack
	/* Load interrupt stack */
	ld.w 	SYS_INT_STACK[r8],sp	
dontLoadIntStack:		
	/*
	 * Call kernel, r6-stack 
	 */
	jarl 	_Irq_Entry, lp
	/* A new stack is returned in r10 */
	
	mov 	r10,sp
	ld.w    C_CONTEXT_OFFS[sp],r6
	CMP16(FUNC_PATTERN,r6)
    be     	os_func_restore
    CMP16(ISR_PATTERN, r6)
    be     	os_isr_restore
    /* Corrupted stack, something is really, really wrong */
baaaad:
	jr		baaaad		
    
    
    
