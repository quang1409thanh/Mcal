/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

#define _ASSEMBLER_
#include "asm_offset.h"
//#include "arch_offset.h"
//#include "arch_stack.h"


.section .text,"ax",@progbits


//.extern _Os_Sys
//.extern _Irq_Entry
//.extern _Os_Isr

/**
 * Os_ArchSetStackPointer
 */
    .global Os_ArchSetStackPointer
    .type Os_ArchSetStackPointer,  @function
Os_ArchSetStackPointer:
	ret

/**
 * Os_ArchGetStackPtr
 */
    .global Os_ArchGetStackPtr
    .type Os_ArchGetStackPtr,  @function
Os_ArchGetStackPtr:
	mov.aa	%a4,%a10
	ret

/**
 * Os_ArchSetSpAndCall
 *
 * @param a4 Pointer to the stack
 * @param a5 Pointer to the function to call
 */
 	.global Os_ArchSetSpAndCall
 	.type Os_ArchSetSpAndCall,  @function
Os_ArchSetSpAndCall:
	mov.aa %a4,%a10
	calli  %a5
noMore:	
	j noMore

	/* 
	 * Os_ArchSwapContext
     *	 
	 * @param a4 - PCB for old task
	 * @param a5 - PCB for new task
	 */
	 
    .global Os_ArchSwapContext
    .type Os_ArchSwapContext,  @function
Os_ArchSwapContext:
    .global Os_ArchSwapContextTo
    .type Os_ArchSwapContextTo,  @function
    
    /* Save lower context */
    svlcx

	/* Store pcxi as context on stack */
	mfcr	%d5,$pcxi
	st.w	[%a10],%d5 	
    
	/* store our stack in old PCB */
	st.a    [%a4]PCB_STACK_CURR_P,%a10

	/* flow down */ 
    

Os_ArchSwapContextTo:

	/* Get stack for new task */
	ld.a   %a10,[%a5]PCB_STACK_CURR_P

	/* Set new current task */ 
	movh.a %a6, hi:Os_Sys
	lea %a6,[%a6]lo:Os_Sys
	st.a  [%a6]SYS_CURR_PCB_P,%a5 	    	

	mfcr	%d4, $pcxi

	/* Get the context from stack */
	ld.w   %d5,[%a10]
	mtcr   $pcxi, %d5
	isync

	/* If old task == NULL then we need to free the context that have 
	 * been marked with 0 */
	jnz.a 	%a4, no_free

	call 	Os_ArchFree

no_free:

	/* Clear PSW.CDC since it traps otherwise. the real CDC will be restored 
	 *  by the upper context */	
	mfcr   %d5, $psw
	andn   %d5,%d5,0x3f
	mtcr   $psw, %d5    
	
	/* Pop Lower */
	rslcx
	
	/* Pop Upper */
	rfe
	
		
#if 0
	ld.w PCB_STACK_CURR_P[r7],sp	
	
	/* Set new current task */
	MOV32(_Os_Sys,r6)
	st.w    r7, SYS_CURR_PCB_P[r6]
	
	/* Restore C context */
	ld.w    C_CONTEXT_OFFS[sp],r6
    CMP16(FUNC_PATTERN,r6)
    be     	os_func_restore
    CMP16(ISR_PATTERN, r6)
    be     	os_isr_restore
#endif

/* EI interrupt handler 
 * HW set registers are 
 * - IEPC
 * - EIPSW
 * - EIIC - Exception cause code.
 */     
     .global _Irq_Handler
    .type _Irq_Handler,  @function 
_Irq_Handler:
