/*-------------------------------- Arctic Core ------------------------------
 * Copyright (C) 2013, ArcCore AB, Sweden, www.arccore.com.
 * Contact: <contact@arccore.com>
 * 
 * You may ONLY use this file:
 * 1)if you have a valid commercial ArcCore license and then in accordance with  
 * the terms contained in the written license agreement between you and ArcCore, 
 * or alternatively
 * 2)if you follow the terms found in GNU General Public License version 2 as 
 * published by the Free Software Foundation and appearing in the file 
 * LICENSE.GPL included in the packaging of this file or here 
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>
 *-------------------------------- Arctic Core -----------------------------*/

/*
  Copyright (C) 2009-2015 Texas Instruments Incorporated - www.ti.com 
 
 
  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions 
  are met:

    Redistributions of source code must retain the above copyright 
    notice, this list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the   
    distribution.

    Neither the name of Texas Instruments Incorporated nor the names of
    its contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/        

#define _ASSEMBLER_
#include "asm_arm.h"

	
	ASM_GLOBAL(_errata_CORTEXR4_57_)
    ASM_TYPE(_errata_CORTEXR4_57_, %function)

	ASM_GLOBAL(_errata_CORTEXR4_66_)
    ASM_TYPE(_errata_CORTEXR4_66_, %function)
	
	ASM_GLOBAL(_coreGetInstructionFaultAddress_)
    ASM_TYPE(_coreGetInstructionFaultAddress_, %function)

	ASM_GLOBAL(_coreClearInstructionFaultAddress_)
    ASM_TYPE(_coreClearInstructionFaultAddress_, %function)


/*-------------------------------------------------------------------------------*/
// Get instruction fault address register
// SourceId : CORE_SourceId_019
// DesignId : CORE_DesignId_019
// Requirements: HL_SR495

_coreGetInstructionFaultAddress_:

        mrc   p15, #0, r0, c6, c0, #2
        bx    lr

/*-------------------------------------------------------------------------------*/
// Clear instruction fault address register
// SourceId : CORE_SourceId_020
// DesignId : CORE_DesignId_020
// Requirements: HL_SR495

    .weak _coreClearInstructionFaultAddress_
    .type _coreClearInstructionFaultAddress_, %function
	
_coreClearInstructionFaultAddress_:

        push {r0}
        mov   r0,  #0
        mcr   p15, #0, r0, c6, c0, #2
        pop {r0}  
		bx    lr


/*
@ Work Around for Errata CORTEX-R4#57:
@ 
@ Errata Description: 
@            Conditional VMRS APSR_Nzcv, FPSCR May Evaluate With Incorrect Flags
@ Workaround:
@            Disable out-of-order single-precision floating point 
@            multiply-accumulate instruction completion 
*/
_errata_CORTEXR4_57_:

        push {r0,r1}
        mrc p15, #0, r0, c15, c0, #0 	// Read Secondary Auxiliary Control Register
        ldr r1,=0x10000 				// Set BIT 16 (Set DOOFMACS)
        orr r0, r1          
        mcr p15, #0, r0, c15, c0, #0 // Write Secondary Auxiliary Control Register 
        pop {r0,r1}
        bx lr


/*
@ Work Around for Errata CORTEX-R4#66:
@ 
@ Errata Description:        
@            Register Corruption During A Load-Multiple Instruction At 
@            an Exception Vector
@ Workaround:
@            Disable out-of-order completion for divide instructions in 
@            Auxiliary Control register 
*/
    
_errata_CORTEXR4_66_:

        push {r0,r1}
        mrc p15, #0, r0, c1, c0, #1 // Read Auxiliary Control register
		ldr r1,=0x80	// Set BIT 7 (Disable out-of-order completion 
						// for divide instructions.)
		orr	r0,r1
        mcr p15, #0, r0, c1, c0, #1 // Write Auxiliary Control register
        pop {r0,r1}        
		bx lr




#if defined(__ARMCC_VERSION)
	END
#endif

